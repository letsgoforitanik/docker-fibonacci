services:
  
  nginx:
    image: nginx:stable-alpine3.17-slim
    restart: always
    depends_on:
      - react
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - 80:80

  postgres:
    image: postgres:15.5-alpine3.18
    restart: always
    volumes:
      - postgresdata:/var/lib/pgsql/data
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root_pass
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 3s
      timeout: 30s
      retries: 5
      start_period: 30s
  
  redis:
    image: redis:alpine3.18
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 30s
      retries: 5
      start_period: 30s

  api:
    build:
      context: ./express-server
      dockerfile: Dockerfile.dev
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy      
    volumes:
      - ./express-server:/app
    environment:
      SERVER_PORT: 5000
      PG_HOST: postgres
      PG_DATABASE: root
      PG_USER: root
      PG_PASSWORD: root_pass
      PG_PORT: 5432
      REDIS_URL: redis://redis:6379
    
  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile.dev
    restart: always
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./worker:/app
    environment:
      REDIS_URL: redis://redis:6379

  react:
    build:
      context: ./react-app
      dockerfile: Dockerfile.dev
    restart: always
    depends_on:
      - api
    volumes:
      - ./react-app:/app
    environment:
      PORT: 80
      REACT_APP_API_URL: http://localhost/api/


volumes:
  postgresdata: {}